Now, what about updating or adding? What about these buttons here when we tap those? Well, it's not that different. For that we have to confirm handler function which is triggered whenever this button the update or add button depending on which mode we are, will be tapped. So, this function is executed when this button here is tapped. Therefore in here, we want to use the expenses context and now either call add or update expense depending on the mode. So, actually in confirm handler, we first of all wanna check the value in our is editing constant here. We wanna check if we are editing in which case we wanna call expenses context, update expense. Else if we are not editing, then we are adding. Then we want to call expense context add expense. Either way thereafter, we want to go back and close the model. Of course, we need to pass some data to update and add expense. If we are adding an expense we need to pass the entered description, date and amount. We will take care about this in the next course section but for the moment we have no way of entering values because we will add those inputs in the next section as mentioned. Therefore, what we'll do instead here for the moment is set up some dummy object where the description is always set to test where the amount is always set to $19.99 for example, and where the date is always set to new date and then some dummy date like 2022 May 19th, something like this. And it will use the same dummy object for updating. Actually here, I will add a couple of exclamation marks to test and change the amount to $29.99 and the date to May 20th. But besides that, it's our object with the same properties. And we also have to provide the ID here because in the context you might recall that in case of updating, the first parameter we receive is actually the ID of the expense that should be updated. So, therefore now here in update expense and manage expense we pass the ID to be precise the added expense ID as a first value. So, now we should also be able to confirm this model. If we save this now, if I added another book here by clicking on it and click update you see it was overwritten with test and that test amount. If I add a new expense by clicking add here we see this expense here as well. It's in the recent expenses here because in my case this is actually in the future and therefore it is of course greater than that date seven days ago. If you wanted to rule out that you can get dates in the future, typically, you would probably not enter expenses in the future but if you would want to rule that out you can update your return expression here in this filter function and make sure that you return true if expense date is great later than date seven days ago and expense date also is smaller or equal than today. Here you also might wanna use greater or equal to include that date seven days ago depending on how you define seven days ago. With that, that would be gone from the recent dates but we would have it here in all expenses. So, that is also working now. And of course we can still delete all those expenses if we want to, update them as I showed you and add new expenses whenever we want. So, therefore this is looking pretty good. We are of course, missing those actual inputs but we will add them soon. For this section we are almost done. And I just wanna make sure that we have some fallback text in case that we have no expenses. And I also wanna make sure that the status bar here isn't black because that's a bit hard to see.